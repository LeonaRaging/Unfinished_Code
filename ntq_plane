#include <bits/stdc++.h>
using namespace std;

#define fi first
#define se second
#define ll long long
#define pb push_back
#define db(val) "[" #val " = " << (val) << "] "

const ll mod = 1e9 + 7;
const int maxn = 2e5 + 4;
const int INF = 1e9;

struct Edge {
    int u, v;
    bool orient;
    int get(int x) {
        return x ^ u ^ v;
    }
    Edge (int u = 0, int v = 0, bool orient = 0): u(u), v(v), orient(orient) {}
};

int a, b, m;
set<int> f[maxn], g[maxn];
vector<Edge> edges;

int main()
{
    // ios::sync_with_stdio(0);
    // cin.tie(0); cout.tie(0);
    //freopen(".INP", "r", stdin);
    //freopen(".OUT", "w", stdout);
    cin >> a >> b >> m;
    for (int i = 0; i < m; i++) {
        int u, v; cin >> u >> v;
        f[u].insert(i);
        g[v].insert(i);
        edges.pb(Edge(u, v, 0));
    }
    int res = 0, l = 1, r = 1;
    while (l <= a || r <= b) {
        while (f[l].empty() && l <= a) 
            res++, l++;
        while (g[r].empty() && r <= b) 
            res++, r++;
        int maxL = l, maxR = r;
        while (l <= maxL || r <= maxR) {
            for (int i : f[l]) {
                edges[i].orient = 0;
                int v = edges[i].get(l);
                g[v].erase(i);
                maxL = max(maxL, v);
            }
            for (int i : g[r]) {
                edges[i].orient = 1;
                int v = edges[i].get(r);
                f[v].erase(i);
                maxR = max(maxR, v);
            }
            l++, r++;
        }
        res++;
    } 
    cout << res << '\n';
    for (int i = 0; i < m; i++)
        cout << edges[i].orient << ' ';
}
