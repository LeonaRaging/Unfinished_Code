#include<bits/stdc++.h>
using namespace std;

const int N = 300;
const int MAX = 90300;
const int mod = 1e9 + 7;

int n, k, L[N + 5], R[N + 5], dp[N + 5][MAX + 4], sum[MAX + 4];

void add(int &a, int b) {
	a += b; if (a > mod) a -= mod;
}

int get(int l, int r) {
	if (l > r) return 0;
	if (!l) return sum[r];
	return sum[r] - sum[l - 1];
}

int sign(int x) {
	return 2 * N - x;
}

int Solve(int k) {
	k += N;
	memset(dp, 0, sizeof dp);
	memset(sum, 0, sizeof sum);
	dp[0][N] = sum[N] = 1;
	for (int i = 0; i <= MAX; i++)
		sum[i] += sum[i - 1];
	for (int i = 1; i <= n; i++) {
		for (int j = 0; j <= k; j++) {
			add(dp[i][j], get(j - L[i], j - min(j, R[i])));
			if (L[i] <= j && j <= R[i])
				add(dp[i][j], get(0, N));
		}
		for (int j = 0; j <= MAX; j++) {
			sum[j] = dp[i][j];
			if (j) add(sum[j], sum[j - 1]);
		}
	}
	clog << dp[3][298];
	return get(0, k);
}

int main() 
{
	ios::sync_with_stdio(0);
	cin.tie(0); cout.tie(0);
	cin >> n >> k;
	for (int i = 1; i <= n; i++) {
		cin >> L[i] >> R[i];
		L[i] += N; R[i] += N;
	}
	return cout << Solve(k), 0;
	cout << Solve(k) - Solve(k - 1);
}
